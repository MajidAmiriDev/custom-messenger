<!-- views/messaging.ejs -->
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messaging</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
</head>
<body class="bg-gray-100 p-5">
<h1 class="text-2xl font-bold mb-5">Messaging</h1>

<div class="mb-5">
    <input id="usernameInput" type="text" placeholder="Find User" class="border rounded p-2 w-1/2" />
    <button id="findUserButton" class="bg-blue-500 text-white rounded p-2 ml-2">Find User</button>
</div>

<div id="chatArea" class="hidden border p-4 rounded bg-white shadow">
    <h2 class="text-xl font-semibold mb-2" id="chatWithUser"></h2>
    <div id="messages" class="mb-2 h-40 overflow-y-auto border rounded p-2 bg-gray-50"></div>
    <input id="messageInput" type="text" placeholder="text ..." class="border rounded p-2 w-full" />
    <button id="sendMessageButton" class="bg-green-500 text-white rounded p-2 mt-2">Send</button>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const userEmail = '<%= email %>';
    const jwtToken = '<%= token %>';

    const socket = io({
        auth: { token: jwtToken },
        query: { email: userEmail }
    });

    socket.on('connect', () => console.log('Socket connected'));

    document.getElementById('findUserButton').addEventListener('click', () => {
        const username = document.getElementById('usernameInput').value;
        if (username) {
            socket.emit('findUser', username);
        }
    });

    socket.on('userFound', (username) => {
        updateChatHeader(username);
        loadPreviousMessages(username);
    });



    socket.on('userNotFound', (messages) => {
        alert(messages);
    });

    socket.on('loadMessages', (messages) => {
        displayMessages(messages);
    });

    socket.on('newMessage', (data) => {
        const currentChatUser = getCurrentChatUser();
        if (data.sender === currentChatUser) {
            appendMessage(data.sender, data.content);
        } else {
            notifyNewMessage(data.sender);
        }
    });

    socket.on('newMessagesAvailable', (messages) => {
        messages.forEach(message => notifyNewMessage(message.sender, message.content));
    });

    document.getElementById('sendMessageButton').addEventListener('click', () => {
        const message = document.getElementById('messageInput').value;
        const receiver = getCurrentChatUser();
        if (message && receiver) {
            appendMessage(userEmail, message);
            socket.emit('sendMessage', { sender: userEmail, receiver, content: message });
            document.getElementById('messageInput').value = ''; // Clear input field
        }
    });

    function updateChatHeader(username) {
        document.getElementById('messages').innerHTML = '';
        document.getElementById('chatWithUser').innerText = `چت با ${username}`;
        document.getElementById('chatArea').classList.remove('hidden');
    }

    function loadPreviousMessages(username) {
        socket.emit('loadMessages', username);
    }

    function displayMessages(messages) {
        messages.forEach(message => appendMessage(message.sender, message.content));
        scrollToBottom();
    }

    function appendMessage(sender, content) {
        const messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML += `<p><strong>${sender}:</strong> ${content}</p>`;
        scrollToBottom();
    }

    function scrollToBottom() {
        const messagesDiv = document.getElementById('messages');
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function getCurrentChatUser() {
        return document.getElementById('chatWithUser').innerText.replace('چت با ', '');
    }

    function notifyNewMessage(sender, content) {
        alert(`پیام جدید از ${sender}: ${content || ''}`);
    }
</script>
</body>
</html>